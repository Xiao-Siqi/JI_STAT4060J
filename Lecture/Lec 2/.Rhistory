random_y.in <- random_y[distance<=1]
random_y.out <- random_y[distance>1]
plot(random_x.in, random_y.in, col = 'red', xlim = c(-1,1), ylim = c(-1,1))
par(new = TRUE)
plot(random_x.out, random_y.out, col = 'blue', xlim = c(-1,1), ylim = c(-1,1))
}
pi3_plot(100000)
pi3_plot <- function(n){
random_x <- runif(n, min = -1, max = 1)
random_y <- runif(n, min = -1, max = 1)
distance <- sqrt(random_x^2 +random_y^2)
random_x.in <- random_x[distance<=1]
random_x.out <- random_x[distance>1]
random_y.in <- random_y[distance<=1]
random_y.out <- random_y[distance>1]
plot(random_x.in, random_y.in, col = 'red', xlim = c(-1,1), ylim = c(-1,1))
par(new = TRUE)
plot(random_x.out, random_y.out, col = 'blue', xlim = c(-1,1), ylim = c(-1,1))
}
pi3_plot(10^6)
pi3_plot <- function(n){
random_x <- runif(n, min = -1, max = 1)
random_y <- runif(n, min = -1, max = 1)
distance <- sqrt(random_x^2 +random_y^2)
random_x.in <- random_x[distance<=1]
random_x.out <- random_x[distance>1]
random_y.in <- random_y[distance<=1]
random_y.out <- random_y[distance>1]
plot(random_x.in, random_y.in, col = 'red', xlim = c(-1,1), ylim = c(-1,1))
par(new = TRUE)
plot(random_x.out, random_y.out, col = 'blue', xlim = c(-1,1), ylim = c(-1,1))
title("")
}
pi3_plot(10^6)
pi3_plot <- function(n){
random_x <- runif(n, min = -1, max = 1)
random_y <- runif(n, min = -1, max = 1)
distance <- sqrt(random_x^2 +random_y^2)
random_x.in <- random_x[distance<=1]
random_x.out <- random_x[distance>1]
random_y.in <- random_y[distance<=1]
random_y.out <- random_y[distance>1]
plot(random_x.in, random_y.in, col = 'red', xlim = c(-1,1), ylim = c(-1,1))
par(new = TRUE)
plot(random_x.out, random_y.out, col = 'blue', xlim = c(-1,1), ylim = c(-1,1), xlab = '', ylab = '')
title("")
}
pi3_plot(10^6)
pi3_plot <- function(n){
random_x <- runif(n, min = -1, max = 1)
random_y <- runif(n, min = -1, max = 1)
distance <- sqrt(random_x^2 +random_y^2)
random_x.in <- random_x[distance<=1]
random_x.out <- random_x[distance>1]
random_y.in <- random_y[distance<=1]
random_y.out <- random_y[distance>1]
plot(random_x.in, random_y.in, col = 'red', xlim = c(-1,1), ylim = c(-1,1), xlab = 'x', ylab = 'y')
par(new = TRUE)
plot(random_x.out, random_y.out, col = 'blue', xlim = c(-1,1), ylim = c(-1,1), xlab = '', ylab = '')
title("pi3")
}
pi3_plot(10^6)
knitr::opts_chunk$set(echo = TRUE)
q1_a<-function(x){
sorted <- sort(x, decreasing = FALSE)
sorted[90]
}
q1_b <- function(x){
sorted <- sort(x, decreasing = FALSE)
sorted[91]
}
q1_c <- function(x){
sorted <- sort(x, decreasing = FALSE)
(sorted[90] + sorted[91]) / 2
}
#q1_a
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_a(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_a")
#q1_b
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_b(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_b")
#q1_c
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_c(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_c")
#quantile(x, 0.9)
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- quantile(test_vector, 0.9)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("quantile(x, 0.9)")
pi2 <- function(n){
sum <- 0
result <- 0
for(i in 1:n){
sum <- sum + 1/(i^2)
}
result <- sqrt(sum * 6)
result
}
n <- 0:6
pi_estimate <- vector(length = 7)
for(i in 0:6){
pi_estimate[i+1] <- pi2(10^i)
}
plot(n, pi_estimate, ylab = 'pi estimate', xlab = 'n')
title("pi2 estimation")
pi3 <- function(n){
random_x <- runif(n, min = -1, max = 1)
random_y <- runif(n, min = -1, max = 1)
in_circle <- 0
for(i in 1:n){
distance <- sqrt(random_x[i]^2 + random_y[i]^2)
if(distance<=1){
in_circle <- in_circle + 1
}
}
in_circle/n
}
n <- 0:6
pi_estimate <- vector(length = 7)
for(i in 0:6){
pi_estimate[i+1] <- pi3(10^i)
}
plot(n, pi_estimate, ylab = 'pi estimate', xlab = 'n')
title("pi3 estimation")
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE, eval = FALSE)
#q1_a
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_a(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_a")
#q1_b
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_b(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_b")
#q1_c
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_c(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_c")
#q1_a
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_a(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_a")
#q1_a
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_a(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_a")
q1_a<-function(x){
sorted <- sort(x, decreasing = FALSE)
sorted[90]
}
#q1_a
m <- 10000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_a(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_a")
#q1_a
m <- 100000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_a(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_a")
#q1_b
m <- 100000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_b(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_b")
#q1_c
m <- 100000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_c(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_c")
#q1_a
m <- 100000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_a(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_a")
#q1_b
m <- 100000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- q1_b(test_vector)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("q1_b")
#quantile(x, 0.9)
m <- 100000
l <- 100000
estimate_vector <- vector(length = l)
#get 100000 estimate as a vector
for (i in 1:l) {
test_vector <- runif(100, min = 0, max = 1)
estimate_vector[i] <- quantile(test_vector, 0.9)
}
avg_estimate <-vector(length = m)
for (i in 1:m){
current_avg <- sum(estimate_vector[1:i]) / i
avg_estimate[i] <- current_avg
}
n <- 1:m
plot(n, avg_estimate, ylab = 'Average 90th estimate', xlab = 'm')
title("quantile(x, 0.9)")
n <- 0:6
pi_estimate <- vector(length = 7)
for(i in 0:6){
pi_estimate[i+1] <- pi2(10^i)
}
print(pi_estimate)
pi2 <- function(n){
sum <- 0
result <- 0
for(i in 1:n){
sum <- sum + 1/(i^2)
}
result <- sqrt(sum * 6)
result
}
n <- 0:6
pi_estimate <- vector(length = 7)
for(i in 0:6){
pi_estimate[i+1] <- pi2(10^i)
}
print(pi_estimate)
n <- 0:6
pi_estimate <- vector(length = 7)
for(i in 0:6){
pi_estimate[i+1] <- pi2(10^i)
}
print("q2_a")
print(pi_estimate)
n <- 0:6
pi_estimate <- vector(length = 7)
for(i in 0:6){
pi_estimate[i+1] <- pi2(10^i)
}
print("q2_a",pi_estimate)
print(pi_estimate)
pi3 <- function(n){
random_x <- runif(n, min = -1, max = 1)
random_y <- runif(n, min = -1, max = 1)
in_circle <- 0
for(i in 1:n){
distance <- sqrt(random_x[i]^2 + random_y[i]^2)
if(distance<=1){
in_circle <- in_circle + 1
}
}
(in_circle/n)*4
}
n <- 0:6
pi_estimate <- vector(length = 7)
for(i in 0:6){
pi_estimate[i+1] <- pi3(10^i)
}
print("q2_b")
print(ppi_estimate)
n <- 0:6
pi_estimate <- vector(length = 7)
for(i in 0:6){
pi_estimate[i+1] <- pi3(10^i)
}
print("q2_b")
print(pi_estimate)
pi3_plot <- function(n){
random_x <- runif(n, min = -1, max = 1)
random_y <- runif(n, min = -1, max = 1)
distance <- sqrt(random_x^2 +random_y^2)
random_x.in <- random_x[distance<=1]
random_x.out <- random_x[distance>1]
random_y.in <- random_y[distance<=1]
random_y.out <- random_y[distance>1]
plot(random_x.in, random_y.in, col = 'red', xlim = c(-1,1), ylim = c(-1,1), xlab = 'x', ylab = 'y')
par(new = TRUE)
plot(random_x.out, random_y.out, col = 'blue', xlim = c(-1,1), ylim = c(-1,1), xlab = '', ylab = '')
title("pi3")
}
pi3_plot(10^6)
source("~/.active-rstudio-document")
library(Rcpp)
install package(Rcpp)
install.packages("Rcpp")
sourceCpp('mySweep_cpp.cpp')
Rcpp::sourceCpp('mySweep_cpp.cpp')
Rcpp::sourceCpp('./mySweep_cpp.cpp')
Rcpp::sourceCpp("mySweep_cpp.cpp")
print(elapse)
print(e)
start <- Sys.time()
set.seed(123)
X <- rnorm(50000)
dim(X)<-c(100,500)
n <- nrow(X)
p <- ncol(X)
A = t(X)%*%X
mySweep_cpp(A,p)
end <- Sys.time()
elapse <- end - start
print(elapse)
print(elapse)
print(elapse)
print(elapse)
source("~/Desktop/STAT4060/Lec9/participation_cpp.R", echo=TRUE)
source("~/Desktop/STAT4060/Lec9/participation_cpp.R", echo=TRUE)
p <- ncol(X)
A = t(X)%*%X
mySweep_cpp(A,p)
end <- Sys.time()
elapse <- end - start
print(elapse)
library(Rcpp)
Rcpp::sourceCpp("mySweep_cpp.cpp")
mySweep_cpp(A,p)
end <- Sys.time()
elapse <- end - start
print(elapse)
getwd()
getwd()
X <- rnorm(50000)
dim(X)<-c(100,500)
n <- nrow(X)
p <- ncol(X)
A = t(X)%*%X
mySweep_cpp(A,p)
end <- Sys.time()
elapse <- end - start
print(elapse)
